lui 0x2     
movr $r1    // r1 is address variable, starting at 32
lui 0x0
lli 0x6     // ac = 6, the memory location of the 4 bit search string
load $r2    // r2 = Mem[6], so r2 is the search string


label FORLOOP:
mova $r1    // ac = address
load $r4    // $r4 = Mem[$ac], so ac holds the candidate value being checked
mova $r2    // $ac = $r2, where r2 is the 4 bit search string
4bitstrfind $r4 // finds the search string $ac within $r4. if it finds something, sets the eq flag to 1
bnei IFEND  // if the eq flag isn’t set (didn’t find string), branch to end of if 
inc $r3     // r3 ++, where r3 is the number of entries with the search string
label IFEND:
inc $r1     // address++
lui 0x6
lli 0x0         // ac = 96, used to check if address < 96
cmp $r1     // check if address (r1) == 96 (ac). if so, set eq flag to 1
bnei FORLOOP    // if address < 96, go to forloop again
lui 0x0
lli 0x7     // ac = mem address 7
store $r3   // Mem[7] = r3 (the number of entries that have the search string)
halt
